package org.tmdd._303.dialogs;

import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.1.11
 * 2019-02-25T13:51:25.334-08:00
 * Generated source version: 3.1.11
 * 
 */
@WebServiceClient(name = "tmddECSoapHttpService", 
                  wsdlLocation = "classpath:schema/tmdd_path.wsdl",
                  targetNamespace = "http://www.tmdd.org/303/dialogs") 
public class TmddECSoapHttpService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://www.tmdd.org/303/dialogs", "tmddECSoapHttpService");
    public final static QName TmddECSoapHttpServicePort = new QName("http://www.tmdd.org/303/dialogs", "tmddECSoapHttpServicePort");
    static {
        URL url = TmddECSoapHttpService.class.getClassLoader().getResource("schema/tmdd_path.wsdl");
        if (url == null) {
            java.util.logging.Logger.getLogger(TmddECSoapHttpService.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "classpath:schema/tmdd_path.wsdl");
        }       
        WSDL_LOCATION = url;   
    }

    public TmddECSoapHttpService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public TmddECSoapHttpService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public TmddECSoapHttpService() {
        super(WSDL_LOCATION, SERVICE);
    }
    




    /**
     *
     * @return
     *     returns TmddECSoapHttpServicePortType
     */
    @WebEndpoint(name = "tmddECSoapHttpServicePort")
    public TmddECSoapHttpServicePortType getTmddECSoapHttpServicePort() {
        return super.getPort(TmddECSoapHttpServicePort, TmddECSoapHttpServicePortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns TmddECSoapHttpServicePortType
     */
    @WebEndpoint(name = "tmddECSoapHttpServicePort")
    public TmddECSoapHttpServicePortType getTmddECSoapHttpServicePort(WebServiceFeature... features) {
        return super.getPort(TmddECSoapHttpServicePort, TmddECSoapHttpServicePortType.class, features);
    }

}
